{
  "version": 3,
  "sources": ["../../../../../apps/phamos/phamos/public/js/have_a_great_day.js"],
  "sourcesContent": ["class MorningFeedbackDialog {\n  constructor() {\n    this.dialog = null;\n    this.init();\n  }\n\n  init() {\n    var self = this;\n    // Function to convert time string \"HH:MM:SS\" to total seconds\n    function timeToSeconds(timeStr) {\n      var parts = timeStr.split(\":\");\n      var hours = parseInt(parts[0], 10) || 0;\n      var minutes = parseInt(parts[1], 10) || 0;\n      var seconds = parseInt(parts[2], 10) || 0;\n      return hours * 3600 + minutes * 60 + seconds;\n    }\n\n    // Check if current time is between specific timeframes\n    frappe.call({\n      method:\n        \"phamos.phamos.doctype.have_a_great_day.have_a_great_day.get_user_time\",\n      args: { user: frappe.session.user },\n      callback: function (response) {\n        if (response.message) {\n          // Extract time strings\n          var userTimeStr = response.message.user_time_str || \"00:00:00\";\n          var fromTimeStr = response.message.from_time || \"00:00:00\";\n          var tillTimeStr = response.message.till_time || \"23:59:59\";\n          var enable_feedback_dialog = response.message.enable_feedback_dialog;\n\n          // Convert time strings to seconds\n          var userTimeSeconds = timeToSeconds(userTimeStr);\n          var fromTimeSeconds = timeToSeconds(fromTimeStr);\n          var tillTimeSeconds = timeToSeconds(tillTimeStr);\n\n          // Compare the total seconds\n          if (\n            fromTimeSeconds <= userTimeSeconds &&\n            userTimeSeconds <= tillTimeSeconds &&\n            enable_feedback_dialog == 1\n          ) {\n            self.showFeedbackDialog();\n          } else {\n          }\n        } else {\n          console.error(\"Failed to fetch user time.\");\n        }\n      },\n      error: function (error) {\n        console.error(\"Error:\", error);\n      },\n    });\n  }\n\n  showFeedbackDialog() {\n    var self = this;\n    // Ensure current time is between 8 am to 9 pm\n    const user_date_fmt = frappe.datetime.get_user_date_fmt().toUpperCase();\n    const user_time_fmt = frappe.datetime.get_user_time_fmt();\n\n    frappe.db.get_value(\n      \"phamos Settings\",\n      {},\n      \"is_employee_feedback\",\n      function (value) {\n        if (value && value.is_employee_feedback == 1) {\n          frappe.db.get_value(\n            \"Employee\",\n            { user_id: frappe.session.user },\n            \"name\",\n            function (value_user) {\n              if (value_user && value_user.name) {\n                var today_date = frappe.datetime.nowdate(); // Get today's date in YYYY-MM-DD format\n                frappe.db.get_value(\n                  \"Have a Great Day\",\n                  {\n                    user: frappe.session.user,\n                    creation_date: today_date, // Directly compare with today's date\n                  },\n                  \"name\",\n                  function (value_feedback) {\n                    if (value_feedback && value_feedback.name) {\n                      // Feedback exists for today\n                    } else {\n                      // No feedback found for today\n                      self.dialog_box(); // Show dialog box if feedback for today does not exist\n                    }\n                  }\n                );\n              } else {\n                //frappe.throw(__(\"Employee not found for the current user.\"));\n              }\n            }\n          );\n        } else if (value && value.is_employee_feedback == 0) {\n          var today_date = frappe.datetime.nowdate(); // Get today's date in YYYY-MM-DD format\n          frappe.db.get_value(\n            \"Have a Great Day\",\n            {\n              user: frappe.session.user,\n              creation_date: today_date, // Directly compare with today's date\n            },\n            \"name\",\n            function (value_feedback) {\n              if (value_feedback && value_feedback.name) {\n                // Feedback exists for today\n              } else {\n                // No feedback found for today\n                self.dialog_box(); // Show dialog box if feedback for today does not exist\n              }\n            }\n          );\n        }\n      }\n    );\n  }\n\n  dialog_box() {\n    // Function to show the dialog box with fields\n    this.dialog = new frappe.ui.Dialog({\n      title: __(\"Have a Great Day!\"),\n      fields: [\n        {\n          fieldtype: \"Small Text\",\n          label: __(\"What are you most looking forward to today?\"),\n          fieldname: \"lookingForward\",\n          in_list_view: 1,\n          reqd: 1, // Required field\n        },\n        {\n          fieldtype: \"Column Break\",\n        },\n        {\n          fieldtype: \"Small Text\",\n          label: __(\"What challenge will you tackle today?\"),\n          fieldname: \"todaysChallenge\",\n          in_list_view: 1,\n          reqd: 1, // Required field\n          default: \"\",\n        },\n      ],\n      primary_action_label: __(\"Save\"),\n      primary_action: (values) => {\n        this.submit(values);\n        this.dialog.hide();\n      },\n    });\n\n    this.dialog.$wrapper.find(\".modal-dialog\").css(\"max-width\", \"500px\");\n    this.dialog.show();\n  }\n\n  submit(values) {\n    // Handle form submission or call backend method\n    this.createRecord(values.lookingForward, values.todaysChallenge);\n\n    // Hide the dialog after submission\n    this.dialog.hide();\n  }\n\n  createRecord(lookingForward, todaysChallenge) {\n    var self = this;\n\n    // Example: Use frappe.call or any backend API to create a record\n    frappe.call({\n      method:\n        \"phamos.phamos.doctype.have_a_great_day.have_a_great_day.create_todays_feedback\",\n      args: {\n        lookingForward: lookingForward,\n        todaysChallenge: todaysChallenge,\n      },\n      callback: function (response) {\n        frappe.msgprint(__(\"Feedback submitted successfully!\"));\n      },\n    });\n  }\n}\n\n// Instantiate the dialog class when the document is ready\n$(document).on(\"app_ready\", function () {\n  new MorningFeedbackDialog();\n});\n"],
  "mappings": "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",
  "names": ["today_date"]
}
